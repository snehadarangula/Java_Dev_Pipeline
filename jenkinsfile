pipeline {
    agent any

    tools {
        // Ensure SonarQube Scanner is installed and named here
        sonarQubeScanner 'SonarQube Scanner'
        maven 'Default Maven' // This should match the Maven name configured in Jenkins Global Tools
    }

    environment {
        SONAR_HOST_URL = 'http://13.201.5.155:9000'
        SONAR_LOGIN = 'sqa_ebce83526d862e40e259010cc2c4b19d7ba82f81'
    }

    stages {
@@ -12,30 +16,27 @@ pipeline {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                // Your build commands, e.g. mvn clean install
                sh 'mvn clean compile'
            }
        }
        //stage('SonarQube analysis') {
          //  steps {
            //    withSonarQubeEnv('SonarQubeServer') {
            //        sh 'mvn sonar:sonar'
                    // Or if using sonar-scanner CLI:
                    // sh 'sonar-scanner'
              //  }
           // }
      //  }

  stage('SonarQube Analysis') {
    def mvn = tool 'Default Maven';
    withSonarQubeEnv() {
      sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=first-java-dev-pipeline"
    }
  }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh "mvn sonar:sonar -Dsonar.projectKey=first-java-dev-pipeline -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_LOGIN}"
                }
            }
        }

     
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}

  







